Abstract  Notes:
=================================
abstract class  Animal
{
public  abstract void foodHabbits(); // abstract method
public abstract void sound();
//non abstract method
public void tail()
{
System.out.println("I amtail");
}
}
abstract class  Harbi   extends  Animal
{
public void foodHabbits()
{
System.out.println("I  am  vegetraian");
}
}
class  Cow  extends Harbi
{
public void sound()
{
System.out.println("  I will make sound AAAA...");
}
}
class  AbstractEx
{
public static void main(String[]  ar)
{
Cow  cowobj =new Cow(); // cowobj is object ithas memory
System.out.println(cowobj);
cowobj.foodHabbits();
cowobj.sound();
cowobj.tail();
Animal aobj =cowobj; //doesn't have any memory
aobj.foodHabbits();
aobj.sound();
}
}

=======================================
MultipleInheritance using interface
=======================================

interface  Add
{
int  sum(int i,int j);
}
interface Sub
{
int diff(int a, int b);
}
//multiple  interface
interface  calc
{
int mul(int a, int b);
}
//multiple inheritance
class  Calculator implements  Add, Sub,calc
{
public  int sum(int i,int j)
{
return (i+j);
}
public  int diff(int a,int b)
{
return (a-b);
}
public  int mul(int a,int b)
{
return (a*b);
}
public static void main(String[] ar)
{
	Calculator  calcobj  = new Calculator();
	System.out.println(calcobj.sum(10,20));
	System.out.println(calcobj.diff(2,1));
	System.out.println(calcobj.mul(3,4));
}
}

===========================
Simple interfaceDemo
============================

interface  RBI
{
static float rate=0; //interacewill be  treated by default as public static final
 float calculateRateofInterest(float rate); //by default for this method public  and abstract  keyword will assign
 void floatingrate();
}
//implementing  the interface in class using a keyword of implements
class SBI  implements  RBI
{
public void floatingrate()
{
rate=3.5f;
}
public float  calculateRateofInterest(float rate)
{
return rate;
}
}
class Inter_Main
{
public static void main(String[] ar)
{
SBI sobj = new  SBI();
System.out.println("SBI is announced the interest rate ="+sobj.calculateRateofInterest(2.5f));
}
}

AbstractEx:

abstract class Vehicle
{
	int no;
	Vehicle()
	{
	System.out.println("I am a constructor");
	}
	void example()
	{
	no=2;
	System.out.println("I am not abstract method"+no);
	}
    	abstract int getSpeed();
}
class Bike extends Vehicle
{
    int getSpeed()
   {
        return 60;
   }
 void seats()
{
System.out.println("No of seats in bike are two");
}
}
class Car extends Vehicle
{
     int getSpeed()
     {
        return 70;
     }
}
class TestVehicle_Abstract
{
    public static void main(String args[])
   {
  Vehicle bike = new Bike(); // creating a object for child class and storing the Parent refference
       Vehicle car = new Car();
bike.example() ;//non-abstract method	
bike.seats();// child class methods
       int bikespeed = bike.getSpeed();
       int carspeed = car.getSpeed();
       System.out.println("Speed of Bike is: "+bikespeed+" Km/h");
       System.out.println("Speed of Car is: "+carspeed+" Km/h");
    }
}